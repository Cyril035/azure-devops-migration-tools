<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MigrationTools.Clients.TfsObjectModel</name>
    </assembly>
    <members>
        <member name="T:MigrationTools.Endpoints.TfsEndpointOptions">
            <summary>
            Configuration options for connecting to a Team Foundation Server (TFS) or Azure DevOps Server endpoint. Provides authentication and project access settings for on-premises TFS operations.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.Collection">
            <summary>
            URI of the TFS collection (e.g., "http://tfsserver:8080/tfs/DefaultCollection"). Must be a valid absolute URL pointing to the TFS collection.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.Project">
            <summary>
            Name of the TFS project within the collection to connect to. This is the project that will be used for migration operations.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.Authentication">
            <summary>
            Authentication configuration for connecting to the TFS server. Supports various authentication modes including Windows authentication and access tokens.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.ReflectedWorkItemIdField">
            <summary>
            Name of the custom field used to store the reflected work item ID for tracking migrated items. Typically "Custom.ReflectedWorkItemId".
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.AllowCrossProjectLinking">
            <summary>
            When true, allows work items to link to items in different projects within the same collection. Default is false for security and organizational clarity.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsEndpointOptions.LanguageMaps">
            <summary>
            Language mapping configuration for translating area and iteration path names between different language versions of TFS.
            </summary>
        </member>
        <member name="T:MigrationTools.Endpoints.TfsLanguageMapOptions">
            <summary>
            Configuration options for mapping language-specific field names between source and target TFS systems. Used to translate area path and iteration path field names when migrating between TFS instances with different language configurations.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsLanguageMapOptions.AreaPath">
            <summary>
            Gets or sets the field name for the area path in the TFS system language (e.g., "Area" for English, "Zone" for French).
            </summary>
            <default>Area</default>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsLanguageMapOptions.IterationPath">
            <summary>
            Gets or sets the field name for the iteration path in the TFS system language (e.g., "Iteration" for English, "It√©ration" for French).
            </summary>
            <default>Iteration</default>
        </member>
        <member name="T:MigrationTools.Endpoints.TfsTeamProjectEndpointOptions">
            <summary>
            Configuration options for connecting to a TFS Team Project endpoint. Inherits from TfsEndpointOptions to provide team project-specific connection settings.
            </summary>
        </member>
        <member name="T:MigrationTools.Endpoints.TfsTeamSettingsEndpointOptions">
            <summary>
            Configuration options for the TFS Team Settings Endpoint that provides access to team-specific settings and configurations within a TFS/Azure DevOps project.
            </summary>
        </member>
        <member name="T:MigrationTools.Endpoints.TfsWorkItemEndpointOptions">
            <summary>
            Configuration options for the TFS/Azure DevOps Work Item Endpoint that defines connection settings and query options for accessing work items in Team Foundation Server or Azure DevOps Server.
            </summary>
        </member>
        <member name="P:MigrationTools.Endpoints.TfsWorkItemEndpointOptions.Query">
            <summary>
            Gets or sets the query options that define which work items to retrieve from the source endpoint, including WIQL queries and parameters.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsCreateTeamFoldersProcessor">
            <summary>
            Creates folders in Shared Queries for each Team
            </summary>
            <status>alpha</status>
            <processingtarget>Shared Queries</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsExportProfilePictureFromADProcessor">
            <summary>
            Downloads corporate images and updates TFS/Azure DevOps profiles
            </summary>
            <status>alpha</status>
            <processingtarget>Profiles</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsExportProfilePictureFromADProcessorOptions">
            <summary>
            Configuration options for the TFS Export Profile Picture from Active Directory Processor that exports user profile pictures from Active Directory for migration purposes.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportProfilePictureFromADProcessorOptions.Domain">
            <summary>
            The source domain where the pictures should be exported. 
            </summary>
            <default>String.Empty</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportProfilePictureFromADProcessorOptions.Username">
            <summary>
            The user name of the user that is used to export the pictures.
            </summary>
            <default>String.Empty</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportProfilePictureFromADProcessorOptions.Password">
            <summary>
            The password of the user that is used to export the pictures.
            </summary>
            <default>String.Empty</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportProfilePictureFromADProcessorOptions.PictureEmpIDFormat">
            <summary>
            TODO: You wpuld need to customise this for your system. Clone repo and run in Debug
            </summary>
            <default>String.Empty</default>
        </member>
        <member name="T:MigrationTools.Processors.TfsExportTeamListProcessor">
            <summary>
            Exports a list of teams from the source Team Foundation Server or Azure DevOps collection, useful for analysis and planning team migrations.
            </summary>
        </member>
        <member name="M:MigrationTools.Processors.TfsExportTeamListProcessor.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools.Processors.TfsEmptyProcessorOptions},MigrationTools.Tools.TfsCommonTools,MigrationTools.Enrichers.ProcessorEnricherContainer,System.IServiceProvider,MigrationTools.ITelemetryLogger,Microsoft.Extensions.Logging.ILogger{MigrationTools.Processors.Infrastructure.Processor})">
            <summary>
            Initializes a new instance of the TfsExportTeamListProcessor class.
            </summary>
            <param name="options">Configuration options for the processor</param>
            <param name="tfsCommonTools">Common TFS tools for processor operations</param>
            <param name="processorEnrichers">Container for processor enrichers</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="telemetry">Telemetry logger for tracking operations</param>
            <param name="logger">Logger for the processor operations</param>
        </member>
        <member name="T:MigrationTools.Processors.TfsExportUsersForMappingProcessor">
            <summary>
            ExportUsersForMappingContext is a tool used to create a starter mapping file for users between the source and target systems.
            Use `ExportUsersForMappingConfig` to configure.
            </summary>
            <status>ready</status>
            <processingtarget>Work Items</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions">
            <summary>
            Configuration options for the TFS Export Users for Mapping Processor that extracts user information from work items to create user mapping files for migration scenarios.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.WIQLQuery">
            <summary>
            WIQL (Work Item Query Language) query used to select the work items from which user information should be extracted.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.OnlyListUsersInWorkItems">
            <summary>
            `OnlyListUsersInWorkItems`
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.ExportAllUsers">
            <summary>
            Set to <see langword="true"/>, if you want to export all users in source and target server.
            The lists of user can be useful, if you need tu manually edit mapping file.
            Users will be exported to file set in <see cref="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.UserExportFile"/>.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.UserExportFile">
            <summary>
            Path to export file where all source and target servers' users will be exported.
            Users are exported only if <see cref="P:MigrationTools.Processors.TfsExportUsersForMappingProcessorOptions.ExportAllUsers"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsFakeProcessor">
            <summary>
            Note: this is only for internal usage. Don't use this in your configurations.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsImportProfilePictureProcessor">
            <summary>
            Downloads corporate images and updates TFS/Azure DevOps profiles
            </summary>
            <status>alpha</status>
            <processingtarget>Profiles</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsImportProfilePictureProcessorOptions">
            <summary>
            Configuration options for the TFS Import Profile Picture Processor that imports user profile pictures into the target TFS/Azure DevOps organization.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsSharedQueryProcessor">
            <summary>
            The TfsSharedQueryProcessor enabled you to migrate queries from one locatio nto another.
            </summary>
            <status>Beta</status>
            <processingtarget>Queries</processingtarget>
        </member>
        <member name="M:MigrationTools.Processors.TfsSharedQueryProcessor.MigrateFolder(Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy,Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder,Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder)">
            <summary>
            Define Query Folders under the current parent
            </summary>
            <param name="targetHierarchy">The object that represents the whole of the target query tree</param>
            <param name="sourceFolder">The source folder in tree on source instance</param>
            <param name="parentFolder">The target folder in tree on target instance</param>
        </member>
        <member name="M:MigrationTools.Processors.TfsSharedQueryProcessor.MigrateQuery(Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy,Microsoft.TeamFoundation.WorkItemTracking.Client.QueryDefinition,Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder)">
            <summary>
            Add Query Definition under a specific Query Folder.
            </summary>
            <param name="targetHierarchy">The object that represents the whole of the target query tree</param>
            <param name="query">Query Definition - Contains the Query Details</param>
            <param name="parentFolder">Parent Folder</param>
        </member>
        <member name="T:MigrationTools.Processors.TfsSharedQueryProcessorOptions">
            <summary>
            The `TfsSharedQueryProcessor` enabled you to migrate queries from one location to another.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsSharedQueryProcessorOptions.PrefixProjectToNodes">
            <summary>
            Do we add the source project name into the folder path
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsSharedQueryProcessorOptions.SharedFolderName">
            <summary>
            The name of the shared folder, made a parameter incase it every needs to be edited
            </summary>
            <default>Shared Queries</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsSharedQueryProcessorOptions.SourceToTargetFieldMappings">
            <summary>
            Mapping of the source to the target
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsTeamSettingsProcessor">
            <summary>
            Native TFS Processor, does not work with any other Endpoints.
            </summary>
            <status>Beta</status>
            <processingtarget>Teams</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsTeamSettingsProcessorOptions">
            <summary>
            Configuration options for the TfsTeamSettingsProcessor, which handles migration of team configurations, capacities, and team-specific settings.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.MigrateTeamSettings">
            <summary>
            Migrate original team settings after their creation on target team project
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.UpdateTeamSettings">
            <summary>
            Reset the target team settings to match the source if the team exists
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.PrefixProjectToNodes">
            <summary>
            Prefix your iterations and areas with the project name. If you have enabled this in `NodeStructuresMigrationConfig` you must do it here too.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.MigrateTeamCapacities">
            <summary>
            Migrate original team member capacities after their creation on the target team project. Note: It will only migrate team member capacity if the team member with same display name exists on the target collection otherwise it will be ignored.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.Teams">
            <summary>
            List of Teams to process. If this is `null` then all teams will be processed.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsTeamSettingsProcessorOptions.UseUserMapping">
            <summary>
            Use user mapping file from TfsTeamSettingsTool when matching users when migrating capacities.
            By default, users in source are matched in target users by current display name. When this is set to `true`,
            users are matched also by mapped name from user mapping file.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsTestConfigurationsMigrationProcessor">
            <summary>
            This processor can migrate `test configuration`. This should be run before `LinkMigrationConfig`.
            </summary>
            <status>Beta</status>
            <processingtarget>Suites &amp; Plans</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsTestConfigurationsMigrationProcessorOptions">
            <summary>
            Configuration options for the TFS Test Configurations Migration Processor that migrates test configurations and settings between TFS/Azure DevOps projects.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor">
            <summary>
            Rebuilds Suits and plans for Test Cases migrated using the WorkItemMigration
            </summary>
            <status>Beta</status>
            <processingtarget>Suites &amp; Plans</processingtarget>
        </member>
        <member name="M:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor.ApplyConfigurations(Microsoft.TeamFoundation.TestManagement.Client.ITestSuiteEntry,Microsoft.TeamFoundation.TestManagement.Client.ITestSuiteEntry)">
            <summary>
            Apply configurations to a single test case entry on the target, by copying from the source
            </summary>
            <param name="sourceEntry"></param>
            <param name="targetEntry"></param>
        </member>
        <member name="M:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor.ApplyDefaultConfigurations(Microsoft.TeamFoundation.TestManagement.Client.ITestSuiteBase,Microsoft.TeamFoundation.TestManagement.Client.ITestSuiteBase)">
            <summary>
            Sets default configurations on migrated test suites.
            </summary>
            <param name="source">The test suite to take as a source.</param>
            <param name="target">The test suite to apply the default configurations to.</param>
        </member>
        <member name="M:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor.FixWorkItemIdInQuery(Microsoft.TeamFoundation.TestManagement.Client.ITestSuiteBase)">
            <summary>
            Fix work item ID's in query based suites
            </summary>
        </member>
        <member name="M:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor.GetTargetIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Retrieve the target identity for a given source descriptor
            </summary>
            <param name="sourceIdentityDescriptor">Source identity Descriptor</param>
            <returns>Target Identity</returns>
        </member>
        <member name="M:MigrationTools.Processors.TfsTestPlansAndSuitesMigrationProcessor.RemoveInvalidLinks(Microsoft.TeamFoundation.TestManagement.Client.ITestPlan)">
            <summary>
            Remove invalid links
            </summary>
            <remarks>
            VSTS cannot store some links which have an invalid URI Scheme. You will get errors like "The URL specified has a potentially unsafe URL protocol"
            For myself, the issue were urls that pointed to TFVC:    "vstfs:///VersionControl/Changeset/19415"
            Unfortunately the API does not seem to allow access to the "raw" data, so there's nowhere to retrieve this as far as I can find.
            Should take care of https://github.com/nkdAgility/azure-devops-migration-tools/issues/178
            </remarks>
            <param name="targetPlan">The plan to remove invalid links drom</param>
        </member>
        <member name="T:MigrationTools.Processors.TfsTestVariablesMigrationProcessor">
            <summary>
            This processor can migrate test variables that are defined in the test plans / suites. This must run before `TestPlansAndSuitesMigrationConfig`.
            </summary>
            <status>Beta</status>
            <processingtarget>Suites &amp; Plans</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsTestVariablesMigrationProcessorOptions">
            <summary>
            Configuration options for the TFS Test Variables Migration Processor that migrates test variables and their values between TFS/Azure DevOps projects.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsTestVariablesMigrationProcessorOptions.Processor">
            <summary>
            Gets the processor identifier for test variables migration.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemBulkEditProcessor">
            <summary>
            This processor allows you to make changes in place where we load from the Target and update the Target. This is used for bulk updates with the most common reason being a process template change.
            </summary>
            <processingtarget>WorkItem</processingtarget>
        </member>
        <member name="M:MigrationTools.Processors.TfsWorkItemBulkEditProcessor.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions},MigrationTools.Tools.TfsCommonTools,MigrationTools.Enrichers.ProcessorEnricherContainer,System.IServiceProvider,MigrationTools.ITelemetryLogger,Microsoft.Extensions.Logging.ILogger{MigrationTools.Processors.TfsWorkItemBulkEditProcessor})">
            <summary>
            Initializes a new instance of the TfsWorkItemBulkEditProcessor class.
            </summary>
            <param name="options">Configuration options for the bulk edit processor</param>
            <param name="tfsCommonTools">Common TFS tools for processor operations</param>
            <param name="processorEnrichers">Container for processor enrichers</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="telemetry">Telemetry logger for tracking operations</param>
            <param name="logger">Logger for the processor operations</param>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemDeleteProcessor">
            <summary>
            The `WorkItemDelete` processor allows you to delete any amount of work items that meet the query.
            **DANGER:** This is not a recoverable action and should be use with extream caution.
            </summary>
            <status>ready</status>
            <processingtarget>WorkItem</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions">
            <summary>
            Configuration options for the TFS Work Item Delete Processor that removes work items from the target system based on specified criteria.
            </summary>
        </member>
        <member name="M:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.#ctor">
            <summary>
            Initializes a new instance of the TfsWorkItemDeleteProcessorOptions class with default settings.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.WIQLQuery">
            <summary>
            Gets or sets the WIQL query used to select work items for deletion. Should return a list of work item IDs.
            </summary>
            <default>SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = @TeamProject AND [System.WorkItemType] NOT IN ('Test Suite', 'Test Plan','Shared Steps','Shared Parameter','Feedback Request') ORDER BY [System.ChangedDate] desc</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.WorkItemIDs">
            <summary>
            Gets or sets a specific list of work item IDs to delete. When specified, takes precedence over the WIQL query.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.FilterWorkItemsThatAlreadyExistInTarget">
            <summary>
            Gets or sets a value indicating whether to filter out work items that already exist in the target before deletion. Typically used to avoid deleting items that shouldn't be removed.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.PauseAfterEachWorkItem">
            <summary>
            Gets or sets a value indicating whether to pause after each work item is deleted for review or debugging purposes.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemDeleteProcessorOptions.WorkItemCreateRetryLimit">
            <summary>
            Gets or sets the number of retry attempts for work item deletion operations when they fail due to transient errors.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemMigrationProcessor">
            <summary>
            WorkItemMigrationConfig is the main processor used to Migrate Work Items, Links, and Attachments.
            Use `WorkItemMigrationConfig` to configure.
            </summary>
            <status>ready</status>
            <processingtarget>Work Items</processingtarget>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions">
            <summary>
            Configuration options for the TfsWorkItemMigrationProcessor, which handles comprehensive work item migration including revisions, links, and attachments.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.UpdateCreatedDate">
            <summary>
            If this is enabled the creation process on the target project will create the items with the original creation date.
            (Important: The item history is always pointed to the date of the migration, it's change only the data column CreateDate,
            not the internal create date)
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.UpdateCreatedBy">
            <summary>
            If this is enabled the creation process on the target project will create the items with the original creation date.
            (Important: The item history is always pointed to the date of the migration, it's change only the data column CreateDate,
            not the internal create date)
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.WIQLQuery">
            <summary>
            A work item query based on WIQL to select only important work items. To migrate all leave this empty. See [WIQL Query Bits](#wiql-query-bits)
            </summary>
            <default>SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = @TeamProject AND [System.WorkItemType] NOT IN ('Test Suite', 'Test Plan','Shared Steps','Shared Parameter','Feedback Request') ORDER BY [System.ChangedDate] desc</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.FixHtmlAttachmentLinks">
            <summary>
            **beta** If enabled this will fix any image attachments URL's, work item mention URL's or user mentions in the HTML
            fields as well as discussion comments. You must specify a PersonalAccessToken in the Source project for Azure DevOps;
            TFS should use integrated authentication.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.WorkItemCreateRetryLimit">
            <summary>
            **beta** If set to a number greater than 0 work items that fail to save will retry after a number of seconds equal to the retry count.
            This allows for periodic network glitches not to end the process.
            </summary>
            <default>5</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.FilterWorkItemsThatAlreadyExistInTarget">
            <summary>
            This loads all of the work items already saved to the Target and removes them from the Source work item list prior to commencing the run.
            While this may take some time in large data sets it reduces the time of the overall migration significantly if you need to restart.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.PauseAfterEachWorkItem">
            <summary>
            Pause after each work item is migrated
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.AttachRevisionHistory">
            <summary>
            This will create a json file with the revision history and attach it to the work item. Best used with `MaxRevisions` or `ReplayRevisions`.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.GenerateMigrationComment">
            <summary>
            If enabled, adds a comment recording the migration
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.WorkItemIDs">
            <summary>
            A list of work items to import
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.MaxGracefulFailures">
            <summary>
            The maximum number of failures to tolerate before the migration fails. When set above zero, a work item migration error is logged but the migration will
            continue until the number of failed items reaches the configured value, after which the migration fails.
            </summary>
            <default>0</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.SkipRevisionWithInvalidIterationPath">
            <summary>
            This will skip a revision if the source iteration has not been migrated i.e. it was deleted
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemMigrationProcessorOptions.SkipRevisionWithInvalidAreaPath">
            <summary>
            When set to true, this setting will skip a revision if the source area has not been migrated, has been deleted or is somehow invalid, etc.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemOverwriteAreasAsTagsProcessor">
            <summary>
            A common issue with older *TFS/Azure DevOps* instances is the proliferation of `Area Paths`. With the use of `Area Path` for `Teams` and the addition of the `Node Name` column option these extensive tag hierarchies should instad be moved to tags.
            </summary>
            <status>Beta</status>
            <processingtarget>Work Item</processingtarget>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteAreasAsTagsProcessorOptions.AreaIterationPath">
            <summary>
            This is a required parameter. That define the root path of the iteration. To get the full path use `\`
            </summary>
            <default>\</default>
        </member>
        <member name="T:MigrationTools.Processors.TfsWorkItemOverwriteProcessor">
            <summary>
            Reapply field mappings after a migration. Does not migrate Work Items, only reapplies changes to field mappings.
            </summary>
            <status>preview</status>
            <processingtarget>Work Items</processingtarget>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteProcessorOptions.WorkItemIDs">
            <summary>
            A list of work items to import
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteProcessorOptions.WIQLQuery">
            <summary>
            A work item query based on WIQL to select only important work items. To migrate all leave this empty. See [WIQL Query Bits](#wiql-query-bits)
            </summary>
            <default>AND  [Microsoft.VSTS.Common.ClosedDate] = '' AND [System.WorkItemType] NOT IN ('Test Suite', 'Test Plan','Shared Steps','Shared Parameter','Feedback Request')</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteProcessorOptions.FilterWorkItemsThatAlreadyExistInTarget">
            <summary>
            This loads all of the work items already saved to the Target and removes them from the Source work item list prior to commencing the run.
            While this may take some time in large data sets it reduces the time of the overall migration significantly if you need to restart.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteProcessorOptions.PauseAfterEachWorkItem">
            <summary>
            Pause after each work item is migrated
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Processors.TfsWorkItemOverwriteProcessorOptions.WorkItemCreateRetryLimit">
            <summary>
            **beta** If set to a number greater than 0 work items that fail to save will retry after a number of seconds equal to the retry count.
            This allows for periodic network glitches not to end the process.
            </summary>
            <default>5</default>
        </member>
        <member name="T:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions">
            <summary>
            Configuration options for the TFS Test Plans and Suites Migration Processor that migrates test plans, test suites, and their associated test cases between TFS/Azure DevOps projects.
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.OnlyElementsWithTag">
            <summary>
            The tag name that is present on all elements that must be migrated. If this option isn't present this processor will migrate all.
            </summary>
            <default>`String.Empty`</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.TestPlanQuery">
            <summary>
            Filtering conditions to decide whether to migrate a test plan or not. When provided, this partial query is added after `Select * From TestPlan Where` when selecting test plans. Among filtering options, `AreaPath`, `PlanName` and `PlanState` are known to work. There is unfortunately no documentation regarding the available fields.
            </summary>
            <default>`String.Empty`</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.RemoveAllLinks">
            <summary>
            ??Not sure what this does. Check code.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.MigrationDelay">
            <summary>
            ??Not sure what this does. Check code.
            </summary>
            <default>0</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.RemoveInvalidTestSuiteLinks">
            <summary>
            Indicates whether the configuration for node structure transformation should be taken from the common enricher configs. Otherwise the configuration elements below are used
            </summary>
            <default>false</default>
            <summary>
            Remove Invalid Links, see https://github.com/nkdAgility/azure-devops-migration-tools/issues/178
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsTestPlansAndSuitesMigrationProcessorOptions.TestPlanIds">
            <summary>
            This flag filters all test plans and retains only the specified ones for migration. Pass the test plan IDs as an array. Example: "TestPlanIds": [123, 456, 789]  
            Works optimally when "TestPlanQuery" is set to null.  
            </summary>
        </member>
        <member name="T:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions">
            <summary>
            Configuration options for the TfsWorkItemBulkEditProcessor, which performs bulk editing operations on work items in place.
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.WhatIf">
            <summary>
            Gets or sets a value indicating whether to run in "what if" mode without making actual changes to work items.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.WIQLQuery">
            <summary>
            A work item query based on WIQL to select only important work items. To migrate all leave this empty. See [WIQL Query Bits](#wiql-query-bits)
            </summary>
            <default>AND  [Microsoft.VSTS.Common.ClosedDate] = '' AND [System.WorkItemType] NOT IN ('Test Suite', 'Test Plan','Shared Steps','Shared Parameter','Feedback Request')</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.WorkItemIDs">
            <summary>
            A list of work items to import
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.FilterWorkItemsThatAlreadyExistInTarget">
            <summary>
            This loads all of the work items already saved to the Target and removes them from the Source work item list prior to commencing the run.
            While this may take some time in large data sets it reduces the time of the overall migration significantly if you need to restart.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.PauseAfterEachWorkItem">
            <summary>
            Pause after each work item is migrated
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TfsWorkItemBulkEditProcessorOptions.WorkItemCreateRetryLimit">
            <summary>
            **beta** If set to a number greater than 0 work items that fail to save will retry after a number of seconds equal to the retry count.
            This allows for periodic network glitches not to end the process.
            </summary>
            <default>5</default>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap">
            <summary>
            Performs mathematical calculations on numeric fields using NCalc expressions during migration.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldCalculationMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options and validates required settings.
            </summary>
            <param name="config">The field map configuration options</param>
            <exception cref="T:System.ArgumentNullException">Thrown when required fields are not specified</exception>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap.TryConvertToNumeric(System.Object,System.Object@)">
            <summary>
            Attempts to convert a field value to a numeric type.
            </summary>
            <param name="value">The field value to convert</param>
            <param name="numericValue">The converted numeric value</param>
            <returns>True if conversion was successful, false otherwise</returns>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldCalculationMap.TryConvertToTargetFieldType(System.Object,Microsoft.TeamFoundation.WorkItemTracking.Client.Field,System.Object@)">
            <summary>
            Attempts to convert the calculation result to the appropriate type for the target field.
            </summary>
            <param name="result">The calculation result</param>
            <param name="targetField">The target field</param>
            <param name="convertedResult">The converted result</param>
            <returns>True if conversion was successful, false otherwise</returns>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldClearMap">
            <summary>
            Clears a target field by setting its value to null, useful for removing data from specific fields during migration.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldClearMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldSkipMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldClearMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldLiteralMap">
            <summary>
            Maps a literal (static) value to a target field, useful for setting constant values across all migrated work items.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldLiteralMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldLiteralMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldLiteralMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldLiteralMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options and validates required settings.
            </summary>
            <param name="config">The field map configuration options</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the target field is not specified</exception>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldMergeMap">
            <summary>
            Merges values from multiple source fields into a single target field using a specified format template.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldMergeMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldMergeMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldMergeMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="P:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldMergeMap.MappingDisplayName">
            <summary>
            Gets the display name for this field mapping, showing the source fields and target field.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldMergeMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options.
            </summary>
            <param name="config">The field map configuration options</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldSkipMap">
            <summary>
            Skips field mapping for a specific target field, effectively leaving the field unchanged during migration.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldSkipMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldSkipMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldSkipMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldToFieldMap">
            <summary>
            Maps the value from a source field to a target field directly, with optional default value substitution for empty or null values.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldToFieldMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldToFieldMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldToFieldMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldToFieldMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options.
            </summary>
            <param name="config">The field map configuration options</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldValueMap">
            <summary>
            Maps field values based on a lookup table, allowing specific source values to be translated to different target values.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldValueMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.FieldValueMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the FieldValueMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.RegexFieldMap">
            <summary>
            Applies regular expression transformations to map values from a source field to a target field using pattern matching and replacement.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.RegexFieldMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.RegexFieldMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the RegexFieldMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.RegexFieldMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options.
            </summary>
            <param name="config">The field map configuration options</param>
        </member>
        <member name="T:MigrationTools.FieldMaps.AzureDevops.ObjectModel.TreeToTagFieldMap">
            <summary>
            Maps work item area path or iteration path hierarchies to tags, allowing tree structures to be represented as flat tag collections.
            </summary>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.TreeToTagFieldMap.#ctor(Microsoft.Extensions.Logging.ILogger{MigrationTools.FieldMaps.AzureDevops.ObjectModel.TreeToTagFieldMap},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the TreeToTagFieldMap class.
            </summary>
            <param name="logger">Logger for the field map operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.FieldMaps.AzureDevops.ObjectModel.TreeToTagFieldMap.Configure(MigrationTools.Tools.Infrastructure.IFieldMapOptions)">
            <summary>
            Configures the field map with the specified options.
            </summary>
            <param name="config">The field map configuration options</param>
        </member>
        <member name="T:MigrationTools.Tools.TfsAttachmentTool">
            <summary>
            Tool for processing and migrating work item attachments between Team Foundation Server instances, handling file downloads, uploads, and attachment metadata.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsAttachmentTool.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools.Tools.TfsAttachmentToolOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{MigrationTools.Tools.TfsAttachmentTool},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the TfsAttachmentTool class.
            </summary>
            <param name="options">Configuration options for the attachment tool</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="logger">Logger for the tool operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.Tools.TfsAttachmentTool.ProcessAttachemnts(MigrationTools.Processors.Infrastructure.TfsProcessor,MigrationTools.DataContracts.WorkItemData,MigrationTools.DataContracts.WorkItemData,System.Boolean)">
            <summary>
            Processes and migrates attachments from a source work item to a target work item.
            </summary>
            <param name="processer">The TFS processor performing the migration</param>
            <param name="source">The source work item containing attachments to migrate</param>
            <param name="target">The target work item to receive the attachments</param>
            <param name="save">Whether to save the target work item after processing attachments</param>
        </member>
        <member name="T:MigrationTools.Tools.TfsAttachmentToolOptions">
            <summary>
            Configuration options for the TFS Attachment Tool that handles the migration of work item attachments between TFS/Azure DevOps systems.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsAttachmentToolOptions.ExportBasePath">
            <summary>
            `AttachmentMigration` is set to true then you need to specify a working path for attachments to be saved locally.
            </summary>
            <default>C:\temp\Migration\</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsAttachmentToolOptions.MaxAttachmentSize">
            <summary>
            `AttachmentMigration` is set to true then you need to specify a max file size for upload in bites.
            For Azure DevOps Services the default is 480,000,000 bites (60mb), for TFS its 32,000,000 bites (4mb).
            </summary>
            <default>480000000</default>
        </member>
        <member name="M:MigrationTools.Tools.TfsEmbededImagesTool.FixEmbededImages(MigrationTools.DataContracts.WorkItemData,System.String,System.String,System.String)">
            from https://gist.github.com/pietergheysens/792ed505f09557e77ddfc1b83531e4fb
        </member>
        <member name="T:MigrationTools.Tools.TfsGitRepositoryToolOptions">
            <summary>
            Configuration options for the TFS Git Repository Tool that handles Git repository mappings and changeset link transformations during work item migration.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsGitRepositoryToolOptions.ShouldDropChangedSetLinks">
            <summary>
            When set to true, changeset links in work items will be removed during migration to prevent broken links when repositories are not migrated.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsGitRepositoryToolOptions.Mappings">
            <summary>
            Dictionary mapping source repository names to target repository names. Used to update Git repository links and references in work items during migration.
            </summary>
            <default>{}</default>
        </member>
        <member name="T:MigrationTools.Tools.TfsNodeStructureTool">
            <summary>
            Tool for creating missing area and iteration path nodes in the target project during migration. Configurable through TfsNodeStructureToolOptions to specify which node types to create.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsNodeStructureTool.ShouldCreateNode(System.String,MigrationTools.Tools.TfsNodeStructureType)">
            <summary>
            Checks node-to-be-created with allowed BasePath's
            </summary>
            <param name="userFriendlyPath">The user-friendly path of the source node</param>
            <param name="nodeStructureType"></param>
            <returns>true/false</returns>
        </member>
        <member name="M:MigrationTools.Tools.TfsNodeStructureTool.CheckIsParentOfSelectedBasePath(System.String)">
            <summary>
            Checks whether a path is a parent of a selected base path (meaning we cannot skip it entirely)
            </summary>
            <param name="userFriendlyPath">The user-friendly path of the source node</param>
            <returns>A boolean indicating whether the path is a parent of any positively selected base path.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MigrationTools.Tools.TfsNodeStructureToolOptions">
            <summary>
            Configuration options for the TFS Node Structure Tool that migrates and transforms area and iteration path hierarchies between TFS/Azure DevOps projects.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsNodeStructureToolOptions.Areas">
            <summary>
            Rules to apply to the Area Path. Is an object of NodeOptions e.g. { "Filters": ["*/**"], "Mappings": [{"Match": "^oldProjectName([\\\\]?.*)$", "Replacement": "targetProjectA$1"}] }
            </summary>
            <default>{"Filters": [], "Mappings": []}</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsNodeStructureToolOptions.Iterations">
            <summary>
            Rules to apply to the Iteration Path. Is an object of NodeOptions e.g. { "Filters": ["*/**"], "Mappings": [{"Match": "^oldProjectName([\\\\]?.*)$", "Replacement": "targetProjectA$1"}] }
            </summary>
            <default>{"Filters": [], "Mappings": []}</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsNodeStructureToolOptions.ShouldCreateMissingRevisionPaths">
            <summary>
            When set to True the susyem will try to create any missing missing area or iteration paths from the revisions.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsNodeStructureToolOptions.MigrateRootNodes">
            <summary>
            By default, only child nodes in node structures are migrated. Turning this on migrates even the root node
            (default area/iteration). This is useful, when you do not have any child areas ion source, but want to migrate
            default area in source to some sub-area in target project. You have to set proper mapping for this to work.
            If after mapping the target node is still just root node (so it is not migrated under some child node),
            nothing happens ‚Äì so migrating root nodes works only if the are remapped to some child node in target project.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.NodeOptions.Filters">
            <summary>
            Using the Glob format you can specify a list of nodes that you want to match. This can be used to filter the main migration of current nodes. note: This does not negate the nees for all nodes in the history of a work item in scope for the migration MUST exist for the system to run, and this will be validated before the migration. e.g. add "migrationSource1\\Team 1,migrationSource1\\Team 1\\**" to match both the Team 1 node and all child nodes.
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools.Tools.NodeOptions.Mappings">
            <summary>
            Remapping rules for nodes, implemented with regular expressions. The rules apply with a higher priority than the `PrefixProjectToNodes`,
            that is, if no rule matches the path and the `PrefixProjectToNodes` option is enabled, then the old `PrefixProjectToNodes` behavior is applied.
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools.Tools.NodeMapping.Match">
            <summary>
            The regular expression to match the node path.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.NodeMapping.Replacement">
            <summary>
            The replacement format for the matched node path.
            </summary>
        </member>
        <member name="T:MigrationTools.Tools.TfsRevisionManagerTool">
            <summary>
            The TfsRevisionManagerTool manipulates the revisions of a work item to reduce the number of revisions that are migrated.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsRevisionManagerToolOptions.ReplayRevisions">
            <summary>
            You can choose to migrate the tip only (a single write) or all of the revisions (many writes).
            If you are setting this to `false` to migrate only the tip then you should set `BuildFieldTable` to `true`.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsRevisionManagerToolOptions.MaxRevisions">
            <summary>
            Sets the maximum number of revisions that will be migrated. "First + Last N = Max".
            If this was set to 5 and there were 10 revisions you would get the first 1 (creation) and the latest 4 migrated.
            </summary>
            <default>0</default>
        </member>
        <member name="T:MigrationTools.Tools.TfsCommonTools">
            <summary>
            Extended collection of tools specific to Team Foundation Server and Azure DevOps migrations, providing TFS-specific functionality beyond the common tools.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsCommonTools.#ctor(MigrationTools.Tools.TfsUserMappingTool,MigrationTools.Tools.TfsAttachmentTool,MigrationTools.Tools.TfsNodeStructureTool,MigrationTools.Tools.TfsRevisionManagerTool,MigrationTools.Tools.TfsWorkItemLinkTool,MigrationTools.Tools.TfsWorkItemEmbededLinkTool,MigrationTools.Tools.TfsValidateRequiredFieldTool,MigrationTools.Tools.TfsTeamSettingsTool,MigrationTools.Tools.TfsEmbededImagesTool,MigrationTools.Tools.TfsGitRepositoryTool,MigrationTools.Tools.Interfaces.IStringManipulatorTool,MigrationTools.Tools.Interfaces.IWorkItemTypeMappingTool,MigrationTools.Tools.Interfaces.IFieldMappingTool)">
            <summary>
            Initializes a new instance of the TfsCommonTools class.
            </summary>
            <param name="userMappingEnricher">Tool for mapping users between source and target</param>
            <param name="attachmentEnricher">Tool for handling work item attachments</param>
            <param name="nodeStructureEnricher">Tool for managing area and iteration path structures</param>
            <param name="revisionManager">Tool for managing work item revision history</param>
            <param name="workItemLinkEnricher">Tool for processing work item links</param>
            <param name="workItemEmbeddedLinkEnricher">Tool for processing embedded links in work items</param>
            <param name="requiredFieldValidator">Tool for validating required fields</param>
            <param name="teamSettingsEnricher">Tool for migrating team settings</param>
            <param name="embededImagesEnricher">Tool for processing embedded images</param>
            <param name="TfsGitRepositoryTool">Tool for git repository operations</param>
            <param name="StringManipulatorTool">Tool for string field manipulation</param>
            <param name="workItemTypeMapping">Tool for work item type mapping</param>
            <param name="fieldMappingTool">Tool for field mapping operations</param>
        </member>
        <member name="T:MigrationTools.Tools.TfsTeamSettingsTool">
            <summary>
            Tool for migrating team settings including team configurations, area paths, iterations, and team-specific settings from source to target Team Foundation Server or Azure DevOps.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsTool.SourceTeamService">
            <summary>
            Gets or sets the source team service for accessing team information.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsTool.SourceTeamSettings">
            <summary>
            Gets or sets the source team settings configuration service for accessing team configuration.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsTool.TargetTeamService">
            <summary>
            Gets or sets the target team service for creating and configuring teams.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsTool.TargetTeamSettings">
            <summary>
            Gets or sets the target team settings configuration service for configuring team settings.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsTeamSettingsTool.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools.Tools.TfsTeamSettingsToolOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{MigrationTools.Tools.TfsTeamSettingsTool},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the TfsTeamSettingsTool class.
            </summary>
            <param name="options">Configuration options for the team settings tool</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="logger">Logger for the tool operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.Tools.TfsTeamSettingsTool.ProcessorExecutionBegin(MigrationTools.Processors.Infrastructure.TfsProcessor)">
            <summary>
            Executes before the processor begins, setting up team services and migrating team settings if enabled.
            </summary>
            <param name="processor">The TFS processor that will be executed</param>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsToolOptions.MigrateTeamSettings">
            <summary>
            Migrate original team settings after their creation on target team project
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsToolOptions.UpdateTeamSettings">
            <summary>
            Reset the target team settings to match the source if the team exists
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsToolOptions.MigrateTeamCapacities">
            <summary>
            Migrate original team member capacities after their creation on the target team project. Note: It will only migrate team member capacity if the team member with same display name exists on the target collection otherwise it will be ignored.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsToolOptions.UseUserMapping">
            <summary>
            Use user mapping file from TfsTeamSettingsTool when matching users when migrating capacities.
            By default, users in source are matched in target users by current display name. When this is set to `true`,
            users are matched also by mapped name from user mapping file.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsTeamSettingsToolOptions.Teams">
            <summary>
            List of Teams to process. If this is `null` then all teams will be processed.
            </summary>
        </member>
        <member name="T:MigrationTools.Tools.TfsUserMappingTool">
            <summary>
            The TfsUserMappingTool is used to map users from the source to the target system. Run it with the ExportUsersForMappingContext to create a mapping file then with WorkItemMigrationContext to use the mapping file to update the users in the target system as you migrate the work items.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsUserMappingTool.SerializeUserMap(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Serializes a user mapping dictionary to a JSON file for use in user mapping operations.
            </summary>
            <param name="fileName">The file path where the user mapping will be saved</param>
            <param name="userMap">The dictionary of user mappings to serialize</param>
            <param name="logger">Logger for the operation</param>
        </member>
        <member name="M:MigrationTools.Tools.TfsUserMappingTool.DeserializeUserMap(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Deserializes a user mapping dictionary from a JSON file for use in user mapping operations.
            </summary>
            <param name="fileName">The file path where the user mapping is stored</param>
            <param name="logger">Logger for the operation</param>
            <returns>A dictionary containing the user mappings, or an empty dictionary if the file doesn't exist</returns>
        </member>
        <member name="M:MigrationTools.Tools.TfsUserMappingTool.MapUserIdentityField(Microsoft.TeamFoundation.WorkItemTracking.Client.Field)">
            <summary>
            Maps a user identity field value using the configured user mappings if the field is configured for mapping.
            </summary>
            <param name="field">The work item field containing a user identity to be mapped</param>
        </member>
        <member name="T:MigrationTools.Tools.TfsUserMappingToolOptions">
            <summary>
            Configuration options for the TFS User Mapping Tool that handles the mapping of user identities between source and target systems during work item migration.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsUserMappingToolOptions.IdentityFieldsToCheck">
            <summary>
            This is a list of the Identiy fields in the Source to check for user mapping purposes. You should list all identiy fields that you want to map.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsUserMappingToolOptions.UserMappingFile">
            <summary>
            This is the file that will be used to export or import the user mappings. Use the ExportUsersForMapping processor to create the file.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsUserMappingToolOptions.MatchUsersByEmail">
            <summary>
            By default, users in source are mapped to target users by their display name. If this is set to true, then the
            users will be mapped by their email address first. If no match is found, then the display name will be used.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsUserMappingToolOptions.SkipValidateAllUsersExistOrAreMapped">
            <summary>
            When set to true, this setting will skip a validation that all users exists or mapped
            </summary>
        </member>
        <member name="T:MigrationTools.Tools.TfsValidateRequiredFieldTool">
            <summary>
            Tool for validating that required fields exist in target work item types before migration, preventing migration failures due to missing required fields.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsValidateRequiredFieldTool.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools.Tools.TfsValidateRequiredFieldToolOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{MigrationTools.Tools.TfsValidateRequiredFieldTool},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the TfsValidateRequiredFieldTool class.
            </summary>
            <param name="options">Configuration options for the validation tool</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="logger">Logger for the tool operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="P:MigrationTools.Tools.TfsValidateRequiredFieldTool.Engine">
            <summary>
            Gets the migration engine instance for accessing migration context.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsValidateRequiredFieldTool.ValidatingRequiredField(MigrationTools.Processors.Infrastructure.TfsProcessor,System.String,System.Collections.Generic.List{MigrationTools.DataContracts.WorkItemData})">
            <summary>
            Validates that a required field exists in all target work item types that correspond to the source work items.
            </summary>
            <param name="processor">The TFS processor performing the migration</param>
            <param name="fieldToFind">The name of the field to validate</param>
            <param name="sourceWorkItems">The source work items to validate against</param>
            <returns>True if all target work item types have the required field; otherwise, false</returns>
        </member>
        <member name="T:MigrationTools.Tools.TfsValidateRequiredFieldToolOptions">
            <summary>
            Configuration options for the TFS Validate Required Field Tool that ensures all required fields are properly populated during work item migration.
            </summary>
        </member>
        <member name="T:MigrationTools.Tools.TfsWorkItemEmbededLinkTool">
            <summary>
            Tool for processing embedded links within work item fields, such as links in HTML fields and converting work item references between source and target systems.
            </summary>
        </member>
        <member name="T:MigrationTools.Tools.TfsWorkItemLinkTool">
            <summary>
            Tool for migrating work item links and relationships between work items, including shared steps and parameters for test cases.
            </summary>
        </member>
        <member name="M:MigrationTools.Tools.TfsWorkItemLinkTool.#ctor(Microsoft.Extensions.Options.IOptions{MigrationTools.Tools.TfsWorkItemLinkToolOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{MigrationTools.Tools.TfsWorkItemLinkTool},MigrationTools.ITelemetryLogger)">
            <summary>
            Initializes a new instance of the TfsWorkItemLinkTool class.
            </summary>
            <param name="options">Configuration options for the work item link tool</param>
            <param name="services">Service provider for dependency injection</param>
            <param name="logger">Logger for the tool operations</param>
            <param name="telemetryLogger">Telemetry logger for tracking operations</param>
        </member>
        <member name="M:MigrationTools.Tools.TfsWorkItemLinkTool.Enrich(MigrationTools.Processors.Infrastructure.TfsProcessor,MigrationTools.DataContracts.WorkItemData,MigrationTools.DataContracts.WorkItemData)">
            <summary>
            Enriches the target work item with links from the source work item, processing all link types and relationships.
            </summary>
            <param name="processor">The TFS processor performing the migration</param>
            <param name="sourceWorkItemLinkStart">The source work item containing links to migrate</param>
            <param name="targetWorkItemLinkStart">The target work item to receive the links</param>
            <returns>The number of links processed</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when source or target work items are null</exception>
        </member>
        <member name="M:MigrationTools.Tools.TfsWorkItemLinkTool.MigrateSharedSteps(MigrationTools.Processors.Infrastructure.TfsProcessor,MigrationTools.DataContracts.WorkItemData,MigrationTools.DataContracts.WorkItemData)">
            <summary>
            Migrates shared steps for test case work items, updating step references in the target work item.
            </summary>
            <param name="processor">The TFS processor performing the migration</param>
            <param name="wiSourceL">The source test case work item</param>
            <param name="wiTargetL">The target test case work item</param>
        </member>
        <member name="M:MigrationTools.Tools.TfsWorkItemLinkTool.MigrateSharedParameters(MigrationTools.Processors.Infrastructure.TfsProcessor,MigrationTools.DataContracts.WorkItemData,MigrationTools.DataContracts.WorkItemData)">
            <summary>
            Migrates shared parameters for test case work items, updating parameter references in the target work item.
            </summary>
            <param name="processor">The TFS processor performing the migration</param>
            <param name="wiSourceL">The source test case work item</param>
            <param name="wiTargetL">The target test case work item</param>
        </member>
        <member name="T:MigrationTools.Tools.TfsWorkItemLinkToolOptions">
            <summary>
            Configuration options for the TFS Work Item Link Tool that manages the migration and processing of work item links between items.
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsWorkItemLinkToolOptions.FilterIfLinkCountMatches">
            <summary>
            Skip validating links if the number of links in the source and the target matches!
            </summary>
        </member>
        <member name="P:MigrationTools.Tools.TfsWorkItemLinkToolOptions.SaveAfterEachLinkIsAdded">
            <summary>
            Save the work item after each link is added. This will slow the migration as it will cause many saves to the TFS database.
            </summary>
            <default>false</default>
        </member>
    </members>
</doc>
